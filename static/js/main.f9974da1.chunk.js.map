{"version":3,"sources":["utils/consts/formElementTypes.js","components/FormConfigure.jsx","store/actionTypes/form.js","store/actions/form.js","containers/FormConfigure.js","components/FormBuilder.jsx","containers/FormBuilder.js","components/FormPreviewer.jsx","utils/helpers/objectOperations.js","containers/FormPreviewer.js","components/Home.jsx","containers/Home.js","App.js","reportWebVitals.js","store/reducers/form.js","store/reducers/index.js","index.js"],"names":["TEXT_AREA","TICK_BOX","FormConfigure","id","deleteFormElement","this","props","Button","variant","onClick","elementId","title","updateTitleText","target","value","tickBoxId","updateTickBoxText","element","addNewTickBox","deleteTickBox","formElementTypes","placeholder","onChange","event","updateTitle","renderDeleteButton","uuid","Row","Col","values","map","e","i","length","updateTickBoxTitle","formElements","renderElement","Component","VIEW_PREVIEW","UPDATE_FORM_TITLE","ADD_NEW_FORM_ELEMENT","DELETE_FORM_ELEMENT","ADD_NEW_TICK_BOX","DELETE_TICK_BOX","UPDATE_TITLE_TEXT","UPDATE_TICK_BOX_TEXT","UPDATE_TICK_BOX_VALUE","UPDATE_TEXT_AREA_VALUE","updateFormTitle","type","actionTypes","payload","connect","state","form","formComposition","dispatch","actions","FormBuilder","formType","formElement","addNewFormElement","baseFormElement","contentValue","tick","className","DropdownButton","Dropdown","Item","addingNewFormElement","elementType","FormPreviewer","updateTextAreaValue","index","updateTickBoxValue","CONSTS","Form","Group","controlId","Label","Control","as","rows","updateTextValue","style","marginLeft","marginRight","maxWidth","Check","label","checked","object","everything","forClip","isPreview","forEach","navigator","clipboard","writeText","JSON","stringify","window","open","renderComponent","copyContents","openNewTab","textValue","Home","alerted","a","publicIp","require","v4","ipv4","platform","isMobile","mobileVendor","mobileModel","url","fetch","method","setState","notifyPhone","viewPreview","marginBottom","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","action","newFormComposition","push","_","remove","findIndex","currentTickBoxIndex","currentElementIndex","newTickBox","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9974da1.chunk.js","sourcesContent":["export const TEXT_AREA=\"TEXT_AREA\";\r\nexport const TICK_BOX=\"TEXT_BOX\";","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport * as uuid from 'uuid';\r\nimport * as formElementTypes from \"../utils/consts/formElementTypes\";\r\nimport './formConfigure.css'\r\n\r\nclass FormConfigure extends Component {\r\n\r\n    renderDeleteButton(id) {\r\n        const { deleteFormElement } = this.props;\r\n        return <Button variant=\"outline-danger\" onClick={() => deleteFormElement(id)}>X</Button>\r\n    }\r\n\r\n    updateTitle(elementId, title) {\r\n        const { updateTitleText } = this.props;\r\n        updateTitleText(elementId, title.target.value);\r\n    }\r\n\r\n    updateTickBoxTitle(elementId, tickBoxId, title) {\r\n        const { updateTickBoxText } = this.props;\r\n        updateTickBoxText(elementId, tickBoxId, title.target.value);\r\n    }\r\n\r\n    renderElement(element) {\r\n        const { addNewTickBox, deleteTickBox } = this.props;\r\n\r\n        if (element.element === formElementTypes.TEXT_AREA) {\r\n            return (\r\n                <div id={'parent-width'}>\r\n                    <input placeholder=\"Text Area Title\" value={element.title} onChange={(event) => this.updateTitle(element.id, event)} />{this.renderDeleteButton(element.id)}\r\n                </div>\r\n            )\r\n        } else if (element.element === formElementTypes.TICK_BOX) {\r\n            const tickBoxId = uuid.v4();\r\n            return (\r\n                <Row id={'parent-width'}>\r\n                    <Col><input placeholder=\"Tick Box Title\" value={element.title} onChange={(event) => this.updateTitle(element.id, event)} /></Col>\r\n                    <Col>\r\n                    {element.values.map((e, i) => {\r\n                        if (element.values.length === i+1) {\r\n                            return (\r\n                                <div\r\n                                    id={'parent-height'}>\r\n                                    <span>\r\n                                        <input placeholder={`Enter Tickbox ${i+1} value`} value={e.value} onChange={(event) => this.updateTickBoxTitle(element.id, e.id, event)} />\r\n                                        {element.values.length > 1 && <Button onClick={() => deleteTickBox(element.id, e.id)} variant=\"outline-danger\">X</Button>}\r\n                                    </span>\r\n                                    <Button onClick={() => addNewTickBox(element.id, tickBoxId)} variant=\"outline-success\">+</Button>\r\n                                </div>\r\n                            )\r\n                        } else {\r\n                            return  (\r\n                                <span>\r\n                                    <input placeholder={`Enter Tickbox ${i+1} value`} value={e.value} onChange={(event) => this.updateTickBoxTitle(element.id, e.id, event)} />\r\n                                    <Button onClick={() => deleteTickBox(element.id, e.id)} variant=\"outline-danger\">X</Button>\r\n                                </span>\r\n                            )\r\n                        }\r\n                    })}\r\n                    </Col>\r\n                    <Col>{this.renderDeleteButton(element.id)}</Col>\r\n                </Row>\r\n            )\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    render() {\r\n        const { formElements } = this.props;\r\n\r\n        return (\r\n            <div id={'parent-height'}>\r\n                {formElements.map((e,i) => {\r\n                    return (\r\n                        <div>\r\n                            {i+1}\r\n                            {this.renderElement(e)}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormConfigure;\r\n","export const VIEW_PREVIEW='VIEW_PREVIEW';\r\n\r\nexport const UPDATE_FORM_TITLE='UPDATE_FORM_TITLE';\r\n\r\nexport const ADD_NEW_FORM_ELEMENT='ADD_NEW_FORM_ELEMENT';\r\nexport const DELETE_FORM_ELEMENT='DELETE_FORM_ELEMENT';\r\n\r\nexport const ADD_NEW_TICK_BOX='ADD_NEW_TICK_BOX';\r\nexport const DELETE_TICK_BOX='DELETE_TICK_BOX';\r\n\r\nexport const UPDATE_TITLE_TEXT='UPDATE_TITLE_TEXT';\r\nexport const UPDATE_TICK_BOX_TEXT='UPDATE_TICK_BOX_TEXT';\r\n\r\nexport const UPDATE_TICK_BOX_VALUE='UPDATE_TICK_BOX_VALUE';\r\nexport const UPDATE_TEXT_AREA_VALUE='UPDATE_TEXT_AREA_VALUE';","import * as actionTypes from '../actionTypes/form';\r\n\r\nexport const viewPreview = () => ({\r\n    type: actionTypes.VIEW_PREVIEW,\r\n    payload: {},\r\n})\r\n\r\nexport const updateFormTitle = title => ({\r\n    type: actionTypes.UPDATE_FORM_TITLE,\r\n    payload: { title },\r\n})\r\n\r\nexport const addNewFormElement = elementType => ({\r\n    type: actionTypes.ADD_NEW_FORM_ELEMENT,\r\n    payload: { elementType },\r\n});\r\n\r\nexport const deleteFormElement = elementId => ({\r\n    type: actionTypes.DELETE_FORM_ELEMENT,\r\n    payload: { elementId },\r\n});\r\n\r\nexport const addNewTickBox = (elementId, tickBoxId) => ({\r\n    type: actionTypes.ADD_NEW_TICK_BOX,\r\n    payload: { elementId, tickBoxId },\r\n})\r\n\r\nexport const deleteTickBox = (elementId, tickBoxId) => ({\r\n    type: actionTypes.DELETE_TICK_BOX,\r\n    payload: { elementId, tickBoxId },\r\n})\r\n\r\nexport const updateTitleText = (elementId, title) => ({\r\n    type: actionTypes.UPDATE_TITLE_TEXT,\r\n    payload: { elementId, title },\r\n})\r\n\r\nexport const updateTickBoxText = (elementId, tickBoxId, title) => ({\r\n    type: actionTypes.UPDATE_TICK_BOX_TEXT,\r\n    payload: { elementId, tickBoxId, title }\r\n})\r\n\r\nexport const updateTickBoxValue = (elementId, tickBoxId) => ({\r\n    type: actionTypes.UPDATE_TICK_BOX_VALUE,\r\n    payload: { elementId, tickBoxId },\r\n})\r\n\r\nexport const updateTextAreaValue = (elementId, textValue) => ({\r\n    type: actionTypes.UPDATE_TEXT_AREA_VALUE,\r\n    payload: { elementId, textValue },\r\n})","import { connect } from 'react-redux';\r\nimport FormConfigure from '../components/FormConfigure';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n    formElements: state.form.formComposition,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    deleteFormElement: elementId => dispatch(actions.deleteFormElement(elementId)),\r\n    addNewTickBox: (elementId, tickBoxId) => dispatch(actions.addNewTickBox(elementId, tickBoxId)),\r\n    deleteTickBox: (elementId, tickBoxId) => dispatch(actions.deleteTickBox(elementId, tickBoxId)),\r\n    updateTitleText: (elementId, title) => dispatch(actions.updateTitleText(elementId, title)),\r\n    updateTickBoxText: (elementId, tickBoxId, title) => dispatch(actions.updateTickBoxText(elementId, tickBoxId, title)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormConfigure);","import React, {Component} from 'react';\r\nimport * as uuid from 'uuid';\r\nimport * as formElementTypes from '../utils/consts/formElementTypes';\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport FormConfigure from \"../containers/FormConfigure\";\r\nimport './formBuilder.css';\r\n\r\nclass FormBuilder extends Component {\r\n\r\n    addingNewFormElement(formType) {\r\n        const { addNewFormElement } = this.props;\r\n        const id = uuid.v4();\r\n        const baseFormElement = {\r\n            id,\r\n            element: formType\r\n        };\r\n\r\n        let formElement\r\n        if (formType === formElementTypes.TEXT_AREA) {\r\n            formElement = {\r\n                ...baseFormElement,\r\n                title: '',\r\n                contentValue: '',\r\n            }\r\n        } else if (formType === formElementTypes.TICK_BOX) {\r\n            const tickBoxId = uuid.v4();\r\n            formElement = {\r\n                ...baseFormElement,\r\n                title: '',\r\n                values: [{id: tickBoxId, tick: false, value: ''}],\r\n            }\r\n        } else {\r\n            formElement = {...baseFormElement}\r\n        }\r\n\r\n        addNewFormElement(formElement);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'form-builder'}>\r\n                <FormConfigure />\r\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Add form element\">\r\n                    <Dropdown.Item onClick={() => this.addingNewFormElement(formElementTypes.TEXT_AREA)}>Text Area</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => this.addingNewFormElement(formElementTypes.TICK_BOX)}>Tick Box</Dropdown.Item>\r\n                </DropdownButton>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormBuilder;\r\n","import { connect } from 'react-redux';\r\nimport FormBuilder from '../components/FormBuilder';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addNewFormElement: elementType => dispatch(actions.addNewFormElement(elementType)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormBuilder);","import React, {Component} from 'react';\r\nimport * as CONSTS from '../utils/consts/formElementTypes';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {cleanObjectForUser} from \"../utils/helpers/objectOperations\";\r\n\r\nclass FormPreviewer extends Component {\r\n\r\n    updateTextValue(elementId, event) {\r\n        const { updateTextAreaValue } = this.props;\r\n        updateTextAreaValue(elementId, event.target.value);\r\n    }\r\n\r\n    renderComponent(element, index) {\r\n        const { updateTickBoxValue } = this.props\r\n\r\n        if (element.element === CONSTS.TEXT_AREA) {\r\n            return (\r\n                <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n                    <Form.Label>{index}. {element.title}</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={3} value={element.contentValue} onChange={(event) => this.updateTextValue(element.id, event)} />\r\n                </Form.Group>\r\n            )\r\n        } else if (element.element === CONSTS.TICK_BOX) {\r\n            return (\r\n                <div style={{marginLeft: 'auto', marginRight: 'auto', maxWidth: '300px'}}>\r\n                    <Form>\r\n                        <Form.Label>{index}. {element.title}</Form.Label>\r\n                        <div key={'checkbox'} className=\"mb-3\">\r\n                            {element.values.map(value => (\r\n                                    <Form.Check\r\n                                        label={value.value}\r\n                                        onChange={() => updateTickBoxValue(element.id, value.id)}\r\n                                        checked={value.tick}\r\n                                    />\r\n                                )\r\n                            )}\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div />\r\n        }\r\n    }\r\n\r\n    copyContents() {\r\n        const { everything } = this.props;\r\n        const forClip = cleanObjectForUser({...everything})\r\n        navigator.clipboard.writeText(JSON.stringify(forClip));\r\n    }\r\n\r\n    openNewTab() {\r\n        window.open(\"https://jsonformatter.org/json-parser\");\r\n    }\r\n\r\n    render() {\r\n        const { title, formElements } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h3>{title}</h3>\r\n                {formElements.length > 0 ? formElements.map((element, i) => this.renderComponent(element, i+1)) : <h3>Create some forms!</h3>}\r\n                <br />\r\n                <Button variant=\"info\" onClick={() => this.copyContents()}>Copy JSON to Clip</Button>\r\n                <br />\r\n                <br />\r\n                <Button variant=\"info\" onClick={() => this.openNewTab()}>Open JSON Parser Website</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormPreviewer;\r\n","import * as CONSTS from '../consts/formElementTypes';\r\n\r\nexport const cleanObjectForUser = object => {\r\n    delete object.isPreview;\r\n    object.formComposition.forEach(element => {\r\n        if (element.element === CONSTS.TICK_BOX) {\r\n            element.values.forEach(e => delete e.id)\r\n        }\r\n        delete element.id;\r\n    })\r\n    return object;\r\n}","import { connect } from 'react-redux';\r\nimport FormPreviewer from '../components/FormPreviewer';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n    title: state.form.title,\r\n    formElements: state.form.formComposition,\r\n    everything: state.form,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateFormTitle: title => dispatch(actions.updateFormTitle(title)),\r\n    updateTickBoxValue: (elementId, tickBoxId) => dispatch(actions.updateTickBoxValue(elementId, tickBoxId)),\r\n    updateTextAreaValue: (elementId, textValue) => dispatch(actions.updateTextAreaValue(elementId, textValue)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormPreviewer);","import React, {Component} from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {isMobile, mobileVendor, mobileModel} from 'react-device-detect';\r\nimport FormBuilder from \"../containers/FormBuilder\";\r\nimport FormPreviewer from \"../containers/FormPreviewer\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alerted: false,\r\n        };\r\n    }\r\n    \r\n    updateTitle(title) {\r\n        const { updateFormTitle } = this.props;\r\n        updateFormTitle(title.target.value);\r\n    }\r\n\r\n    async notifyPhone() {\r\n        const publicIp = require('public-ip');\r\n        const ipv4 = await publicIp.v4();\r\n        const platform = isMobile ? `${mobileVendor} ${mobileModel}` : navigator.platform;\r\n\r\n        const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + platform + \"&site=Form\";\r\n        if(!this.state.alerted) {\r\n            fetch(url, {\r\n                method: 'post'\r\n            });\r\n            this.setState({\r\n                ...this.state,\r\n                alerted: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.notifyPhone();\r\n\r\n        const { isPreview, viewPreview,  title } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h2>Form Builder</h2>\r\n                <br />\r\n                <input style={{marginBottom: '10px'}} placeholder={'Form Title'} value={title} onChange={(event) => this.updateTitle(event)} />\r\n                <FormBuilder />\r\n                <br />\r\n                <br />\r\n                <Button variant=\"secondary\" onClick={() => viewPreview()}>{isPreview ? 'Hide' : 'Show'} Preview</Button>\r\n                {isPreview && <FormPreviewer />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import { connect } from 'react-redux';\r\nimport Home from '../components/Home';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n    isPreview: state.form.isPreview,\r\n    title: state.form.title,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateFormTitle: title => dispatch(actions.updateFormTitle(title)),\r\n    viewPreview: () => dispatch(actions.viewPreview()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import './App.css';\nimport Home from \"./containers/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from '../actionTypes/form';\r\nimport _ from 'lodash';\r\n\r\nconst initialState = {\r\n    isPreview: false,\r\n    title: '',\r\n    formComposition: [],\r\n};\r\n\r\nconst viewPreview = (state, action) => ({\r\n    ...state,\r\n    isPreview: !state.isPreview,\r\n})\r\n\r\nconst updateFormTitle = (state, action) => ({\r\n    ...state,\r\n    title: action.payload.title,\r\n})\r\n\r\nconst addNewFormElement = (state, action) => {\r\n    const newFormComposition = [...state.formComposition];\r\n    newFormComposition.push(action.payload.elementType);\r\n\r\n    return {\r\n        ...state,\r\n        formComposition: newFormComposition,\r\n    }\r\n};\r\n\r\nconst deleteFormElement = (state, action) => {\r\n    const newFormComposition = [...state.formComposition];\r\n    _.remove(newFormComposition, e => e.id === action.payload.elementId);\r\n    return {\r\n        ...state,\r\n        formComposition: newFormComposition,\r\n    }\r\n};\r\n\r\nconst addNewTickBox = (state, action) => {\r\n    const newFormComposition = [...state.formComposition];\r\n    const currentTickBoxIndex = _.findIndex(newFormComposition, e => e.id === action.payload.elementId);\r\n    newFormComposition[currentTickBoxIndex].values.push({id: action.payload.tickBoxId, tick: false, value: ''});\r\n    return {\r\n        ...state,\r\n        formComposition: newFormComposition,\r\n    }\r\n}\r\n\r\nconst deleteTickBox = (state, action) => {\r\n    const newFormComposition = [...state.formComposition];\r\n    const currentTickBoxIndex = _.findIndex(newFormComposition, e => e.id === action.payload.elementId);\r\n    _.remove(newFormComposition[currentTickBoxIndex].values, e => e.id === action.payload.tickBoxId);\r\n    return {\r\n        ...state,\r\n        formComposition: newFormComposition,\r\n    }\r\n}\r\n\r\nconst updateTitleText = (state, action) => {\r\n    const newFormComposition = [...state.formComposition];\r\n    const currentElementIndex = _.findIndex(newFormComposition, e => e.id === action.payload.elementId);\r\n    newFormComposition[currentElementIndex].title = action.payload.title;\r\n    return {\r\n        ...state,\r\n        formComposition: newFormComposition,\r\n    }\r\n}\r\n\r\nexport const updateTickBoxText = (state, action) => {\r\n    const newFormComposition = [...state.formComposition];\r\n    const currentElementIndex = _.findIndex(newFormComposition, e => e.id === action.payload.elementId);\r\n    const newTickBox = newFormComposition[currentElementIndex];\r\n    const currentTickBoxIndex = _.findIndex(newTickBox.values, e => e.id === action.payload.tickBoxId);\r\n    newFormComposition[currentElementIndex].values[currentTickBoxIndex].value = action.payload.title;\r\n    return {\r\n        ...state,\r\n        formComposition: newFormComposition,\r\n    }\r\n}\r\n\r\nconst updateTickBoxValue = (state, action) => {\r\n    const newFormComposition = [...state.formComposition];\r\n    const currentElementIndex = _.findIndex(newFormComposition, e => e.id === action.payload.elementId);\r\n    const newTickBox = newFormComposition[currentElementIndex];\r\n    const currentTickBoxIndex = _.findIndex(newTickBox.values, e => e.id === action.payload.tickBoxId);\r\n    newFormComposition[currentElementIndex].values[currentTickBoxIndex].tick = !newFormComposition[currentElementIndex].values[currentTickBoxIndex].tick;\r\n    return {\r\n        ...state,\r\n        formComposition: newFormComposition,\r\n    }\r\n}\r\n\r\nconst updateTextAreaValue = (state, action) => {\r\n    const newFormComposition = [...state.formComposition];\r\n    const currentElementIndex = _.findIndex(newFormComposition, e => e.id === action.payload.elementId);\r\n    newFormComposition[currentElementIndex].contentValue = action.payload.textValue;\r\n    return {\r\n        ...state,\r\n        formComposition: newFormComposition,\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.VIEW_PREVIEW:\r\n            return viewPreview(state, action);\r\n        case actionTypes.UPDATE_FORM_TITLE:\r\n            return updateFormTitle(state, action);\r\n        case actionTypes.ADD_NEW_FORM_ELEMENT:\r\n            return addNewFormElement(state, action);\r\n        case actionTypes.DELETE_FORM_ELEMENT:\r\n            return deleteFormElement(state, action);\r\n        case actionTypes.ADD_NEW_TICK_BOX:\r\n            return addNewTickBox(state, action);\r\n        case actionTypes.DELETE_TICK_BOX:\r\n            return deleteTickBox(state, action);\r\n        case actionTypes.UPDATE_TITLE_TEXT:\r\n            return updateTitleText(state, action);\r\n        case actionTypes.UPDATE_TICK_BOX_TEXT:\r\n            return updateTickBoxText(state, action);\r\n        case actionTypes.UPDATE_TICK_BOX_VALUE:\r\n            return updateTickBoxValue(state, action);\r\n        case actionTypes.UPDATE_TEXT_AREA_VALUE:\r\n            return updateTextAreaValue(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\nimport form from \"./form\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    form,\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './store/reducers';\nimport { createStore } from 'redux'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}